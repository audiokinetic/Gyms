"""
The content of this file includes portions of the AUDIOKINETIC Wwise Technology
released in source code form as part of the SDK installer package.

Commercial License Usage

Licensees holding valid commercial licenses to the AUDIOKINETIC Wwise Technology
may use this file in accordance with the end user license agreement provided 
with the software or, alternatively, in accordance with the terms contained in a
written agreement between you and Audiokinetic Inc.

Apache License Usage

Alternatively, this file may be used under the Apache License, Version 2.0 (the 
"Apache License"); you may not use this file except in compliance with the 
Apache License. You may obtain a copy of the Apache License at 
http://www.apache.org/licenses/LICENSE-2.0.

Unless required by applicable law or agreed to in writing, software distributed
under the Apache License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the Apache License for
the specific language governing permissions and limitations under the License.
"""

import os
import platform
import re
import subprocess
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from GymsAutomation import GymsAutomation

class UnrealAutomation(GymsAutomation):

    isUnrealFour = False
    
    def __init__(self):
        self.outputFile = 'GymsOutput.log'
        self.gymsPath = os.path.join(os.path.dirname(__file__), "Content", "Gyms")
        self.gymExtension = '.umap'
        self.editors = ['UE4Editor', 'UnrealEditor']

    def get_success_keyword(self):
        if self.isUnrealFour:
            return 'Passed+'
        return 'Success+'

    def get_project_path(self):
        path = os.path.dirname(__file__)
        path = os.path.join(path, 'Gyms.uproject')
        return path

    def platform_argument(self, requiredArguments):
        return

    def get_target_platform(self, args):
        return ''

    def get_log_path(self):
        path = os.path.dirname(__file__)
        system = platform.system
        #Mac log files are stored elsewhere
        if system == 'Darwin':
            path = os.path.join(path, 'Library', 'Logs', self.outputFile)
        else:
            path = os.path.join(path, 'Saved', 'Logs', self.outputFile)
        return path

    """
    Loads the output.txt file generated by Unreal
    and looks for the key words for tests.
    """
    def test_result(self):
        path = self.get_log_path()
        with open(path) as f:
            content = f.readlines()
        results = []
        testsNames = []
        for line in content:
            if re.search('Test Completed+', line):
                results.append(re.search(self.get_success_keyword(), line) != None)
                index = re.search('Path={Project.Functional Tests.', line).end()
                testsNames.append(line[index + 5: -2])
        return results, testsNames

    def run_tests_command(self, testsName, unrealPath, timeout):
        if type(testsName) == str:
            testsName = [testsName]
        gymsList = '+'.join(testsName) + '; Quit'
        cmd_line = self.get_command_line(gymsList, unrealPath)
        subprocess.run(cmd_line, timeout=timeout)
        return self.test_result()

    def get_command_line(self, gymsList, unrealPath, targetPlatform = ''):
        cmd_line = ('"{}" "{}" '.format(unrealPath, self.get_project_path()) +
                    '-ExecCmds="Automation RunTests {}" '.format(gymsList) +
                    '-unattended ' +
                    '-nopause ' +
                    '-testexit="Automation Test Queue Empty" ' +
                    '-log={} '.format(self.outputFile) +
                    '-game'
                    )
        return cmd_line

    def write_results(self, unrealPath, file, gymsList, targetPlatform, failingGyms, timeout):
        self.isUnrealFour = re.search('UE4', unrealPath) != None
        results, testNames = self.run_tests_command(gymsList, unrealPath, timeout)
        gymsSkipped = gymsList
        for i in range(len(results)):
            file.write("{}: {}\n".format(testNames[i], results[i]))
            if not results[i]:
                failingGyms.append(testNames[i])
            for gyms in gymsSkipped:
                if gyms in testNames[i]:
                    gymsSkipped.remove(gyms)
                    break
        for gym in gymsSkipped:
            file.write("{}: Skipped\n".format(gym))
        return failingGyms + gymsSkipped

    def get_gym(self, gymsList, gym):
        #To run a single test, every tests are in a folder with their name. Using "Name"/"Name.FunctionalTest" will
        #assure we are not running a test that might be in the folder of the given test.
        if self.gym_exists(gym, self.gymsPath): 
            #Unreal's tests separator is always "/"
            gymsList.append('{}.{}.FunctionalTest'.format(gym, gym))
        return gymsList


    def get_all_gyms_in_folder(self, folderPath, gymsList):
        if self.contains_gyms(folderPath):
            gymName = folderPath[folderPath.rindex(os.path.sep) + 1:]
            gymsList.append("{}.{}.FunctionalTest".format(gymName, gymName))
        subfolders = os.listdir(folderPath)
        for subfolder in subfolders:
            fullPath = os.path.join(folderPath, subfolder)
            if os.path.isdir(fullPath):
                gymsList = self.get_all_gyms_in_folder(fullPath, gymsList)
        return gymsList

if __name__ == "__main__":
    automation = UnrealAutomation()
    automation.main()