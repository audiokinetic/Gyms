"""
The content of this file includes portions of the AUDIOKINETIC Wwise Technology
released in source code form as part of the SDK installer package.

Commercial License Usage

Licensees holding valid commercial licenses to the AUDIOKINETIC Wwise Technology
may use this file in accordance with the end user license agreement provided 
with the software or, alternatively, in accordance with the terms contained in a
written agreement between you and Audiokinetic Inc.

Apache License Usage

Alternatively, this file may be used under the Apache License, Version 2.0 (the 
"Apache License"); you may not use this file except in compliance with the 
Apache License. You may obtain a copy of the Apache License at 
http://www.apache.org/licenses/LICENSE-2.0.

Unless required by applicable law or agreed to in writing, software distributed
under the Apache License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the Apache License for
the specific language governing permissions and limitations under the License.
"""

import sys
import os
import re
import shutil
import subprocess

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from GymsAutomation import GymsAutomation

class UnityAutomation(GymsAutomation):

    def __init__(self):
        self.outputFile = 'GymsOutput.xml'
        self.gymsPath = os.path.join(self.get_project_path(), "Assets", "Gyms")
        self.gymExtension = '.unity'
        self.editors = ['Unity']

    def should_be_added(self, folderPath):
        return ('8-Editor' in folderPath) == (self.platform.lower() == 'editmode')

    def get_all_gyms_in_folder(self, folderPath, gymsList):
        if self.contains_gyms(folderPath) and self.should_be_added(folderPath):
            gymsList.append(folderPath[folderPath.rindex(os.path.sep) + 1:])
        subfolders = os.listdir(folderPath)
        for subfolder in subfolders:
            fullPath = os.path.join(folderPath, subfolder)
            if os.path.isdir(fullPath):
                gymsList = self.get_all_gyms_in_folder(fullPath, gymsList)
        return gymsList

    def platform_argument(self, requiredArguments):
        requiredArguments.add_argument('-p', '--platform', required=True, type=str, help='The platform on which the tests run.')

    def get_target_platform(self, args):
        return args.platform

    def get_project_path(self):
        return os.path.dirname(__file__)

    def get_log_path(self):
        path = os.path.dirname(__file__)
        return os.path.join(path, self.outputFile)

    def search_line(self, line, gyms, results, testsNames):
        for gym in gyms:
            expectedString = 'classname="{}" runstate="Runnable" testcasecount="1"'.format("Tests." + gym + "Tests")
            #Passed and Failed both have 6 characters.
            search = re.search(expectedString + ' result=".{6}"', line)
            if search:
                substring = line[search.start():search.end()]
                results.append(re.search('Passed', substring) != None)
                testsNames.append(gym)
        return results, testsNames

    """
    Loads the output.txt file generated by Unity
    and looks for the keywords for tests.
    """
    def test_result(self, gyms):
        path = self.get_log_path()
        with open(path) as f:
            content = f.readlines()
        results = []
        testsNames = []
        for line in content:
            results, testsNames = self.search_line(line, gyms, results, testsNames)
        return results, testsNames

    def run_tests_command(self, testsName, unityPath, targetPlatform, timeout):
        cmd_line = self.get_command_line(testsName, unityPath, targetPlatform)
        path = os.path.dirname(__file__)
        fileName = "LastSceneManagerSetup.txt"
        inputFile = os.path.join(path, "Build", fileName)
        outputFile = os.path.join(path, "Library", fileName)
        shutil.copyfile(inputFile, outputFile)
        subprocess.run(cmd_line, timeout=timeout)
        return self.test_result(testsName.split(';'))

    def get_command_line(self, testsName, unityPath, targetPlatform):
        cmd_line = ('"{}" -runTests '.format(unityPath) +
                    '-projectPath "{}" '.format(self.get_project_path()) +
                    '-testFilter "{}" '.format(testsName) +
                    '-testResults "{}{}{}" '.format(self.get_project_path(), os.path.sep, self.outputFile) +
                    '-testPlatform {}'.format(targetPlatform)
                    )
        return cmd_line

    def write_results(self, unityPath, file, gymsList, targetPlatform, failingGyms, timeout):
        if type(gymsList) == str:
            gymsList = [gymsList]
        allGyms = ";".join(gymsList)
        gymsSkipped = gymsList
        if len(allGyms) > 0:
            results, testNames = self.run_tests_command(allGyms, unityPath, targetPlatform, timeout)
            for i in range(len(results)):
                file.write("{}: {}\n".format(testNames[i], results[i]))
                if not results[i]:
                    failingGyms.append(testNames[i])
                gymsSkipped.remove(testNames[i])
            for gym in gymsSkipped:
                file.write("{}: Skipped\n".format(gym))
        return failingGyms + gymsSkipped

    def get_gym(self, gymsList, gym):
        if self.gym_exists(gym, self.gymsPath): 
            gymsList.append(gym)
        return gymsList

if __name__ == "__main__":
    automation = UnityAutomation()
    automation.main()